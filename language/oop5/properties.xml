<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 351133 Maintainer: irker Status: ready -->
<!-- Reviewed: yes -->
<!-- $Revision$ -->
<sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
 <title>Свойства</title>
 
 <para>
  Переменные, которые являются членами класса, называются <emphasis>свойства</emphasis>.
  Также их называют, используя другие термины,
  такие как <emphasis>атрибуты</emphasis> или <emphasis>поля</emphasis>, но в рамках этой документации,
  мы будем называть их <emphasis>свойствами</emphasis>.
  Они определяются с помощью ключевых слов <literal>public</literal>,
  <literal>protected</literal> 
  или <literal>private</literal>, могут сопровождаться необязательным объявлением типа и 
  следуют правилам правильного объявления переменных. Это объявление может содержать инициализацию, но
  эта инициализация должна быть постоянным значением, то есть значение должно быть
  вычислено во время компиляции и не должны зависеть
  от информации, полученной во время выполнения для их вычисления.
 </para>
 <para>
  Смотрите <xref linkend="language.oop5.visibility" /> для получения
  информации о применении
  <literal>public</literal>, <literal>protected</literal>,
  и <literal>private</literal>.
 </para>
 <note>
  <para>
   Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5
   по-прежнему позволяет использовать ключевое слово <literal>var</literal> при
   определении свойств вместо (или в дополнении к)
   <literal>public</literal>, <literal>protected</literal>,
   или <literal>private</literal>. Однако <literal>var</literal> больше не требуется.
   В версиях PHP с 5.0 по 5.1.3 использование
   <literal>var</literal> считалось устаревшим и
   выдавало предупреждение <constant>E_STRICT</constant>, но с PHP
   5.1.3 больше не считается устаревшим и не выдает предупреждения.
  </para>
  <para>
   Если вы объявляете свойство с помощью <literal>var</literal> вместо
   <literal>public</literal>, <literal>protected</literal>
   или <literal>private</literal>, тогда PHP 5 будет рассматривать свойство так,
   как если оно было объявлено как <literal>public</literal>.
  </para>
 </note>
 <para>
  В пределах методов класса доступ к нестатическим свойствам может быть
  получен с помощью <literal>-&gt;</literal> (объектного оператора):
  <varname>$this-&gt;property</varname> (где <literal>property</literal> - имя свойства).
  Доступ к статическим свойствам осуществляется с помощью <literal>::</literal>
  (двойного двоеточия): <varname>self::$property</varname>. Дополнительную информацию о различии
  статических и нестатических свойств смотрите в разделе
  "<link linkend="language.oop5.static">Ключевое слово Static</link>".
 </para>
 <para>
  Псевдопеременная <varname>$this</varname> доступна внутри
  любого метода класса, когда этот метод вызывается из контекста объекта.
  <varname>$this</varname> - это ссылка на вызываемый объект
  (обычно это объект, к которому принадлежит метод, но
  возможно и другого объекта, если метод вызван
  <link linkend="language.oop5.static">статически</link> из контекста второго
  объекта).
 </para>
 
 <para>
  <example>
   <title>Определение свойств</title>
   <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   // правильное определение свойства с PHP 5.6.0:
   public $var1 = 'hello ' . 'world';
   // правильное определение свойства с PHP 5.3.0:
   public $var2 = <<<EOD
hello world
EOD;
   // правильное определение свойства с PHP 5.6.0:
   public $var3 = 1+2;
   // неправильное определение свойств:
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // правильное определение свойств:
   public $var6 = myConstant;
   public $var7 = array(true, false);

   // правильное определение свойства с PHP 5.3.0:
   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
   </programlisting>
  </example>
 </para>
 
 <note>
  <para>
   Существуют несколько интересных функций для обработки классов и объектов. Вы
   можете их увидеть тут
   <link linkend="ref.classobj">Функции для классов/объектов</link>.
  </para>
 </note>
 
  <sect2 xml:id="language.oop5.properties.heredoc-nowdoc">
   <title>Heredoc и Nowdoc</title>
   <para>
     Начиная с PHP 5.3.0
     <link linkend="language.types.string.syntax.heredoc">heredocs</link> и
     <link linkend="language.types.string.syntax.nowdoc">nowdocs</link>
     могут быть использованы в любом статическом контексте данных, включая
     определение свойств.
    <example>
     <title>Пример использования nowdoc для инициализации свойств</title>
     <programlisting role="php">
<![CDATA[
<?php
class foo {
   // Начиная с PHP 5.3.0
   public $bar = <<<'EOT'
bar
EOT;
   public $baz = <<<EOT
baz
EOT;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Поддержка Nowdoc и Heredoc была добавлена в PHP 5.3.0.
    </para>
   </note>
  </sect2>
  
  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Объявления типов</title>
   <para>
     Начиная с PHP 7.4.0, в определении свойств могут быть указаны типы.
    <example>
     <title>Пример использования типизированных свойств</title>
     <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
int(1234)
NULL
]]>
     </screen>
    </example>
   </para>

   <para>
    Перед обращением к типизированному свойству у него должно быть задано значение, иначе будет выброшено исключение
    <classname>Error</classname>.
    <example>
     <title>Обращение к свойствам</title>
     <programlisting role="php">
<![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>

   <sect3 xml:id="language.oop5.properties.typed-properties.valid-types">
    <title>Допустимые типы свойств</title>
    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Тип</entry>
        <entry>Описание</entry>
        <entry>Минимальная версия PHP</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><type>bool</type></entry>
        <entry>
         Свойство должно быть со значением типа <type>bool</type>.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>int</type></entry>
        <entry>
         Свойство должно быть со значением типа <type>int</type>.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>float</type></entry>
        <entry>
         Свойство должно быть со значением типа <type>float</type>.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>string</type></entry>
        <entry>
         Свойство должно быть со значением типа <type>string</type>.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>array</type></entry>
        <entry>
         Свойство должно быть со значением типа <type>array</type>.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>object</literal></entry>
        <entry>
         Свойство должно быть со значением типа <type>object</type>.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>iterable</literal></entry>
        <entry>
         Свойство должно быть со значением типа <type>array</type> или объектом интерфейса
         <interfacename>Traversable</interfacename> (используется &instanceof;).
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>self</literal></entry>
        <entry>
         Свойство должно иметь тот же самый класс, в котором оно определено (используется &instanceof;).
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>parent</literal></entry>
        <entry>
         Свойство должно иметь родительский класс объекта, в котором оно определено (используется &instanceof;).
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry>Имя класса/интерфейса</entry>
        <entry>
         Свойство должно иметь указанный класс или интерфейс (используется &instanceof;).
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry>?type</entry>
        <entry>
         Свойство должно быть со значением указанного типа, либо &null;.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </sect3>
  </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
