<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351711 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="language.oop5.basic" xmlns="http://docbook.org/ns/docbook">
 <title>Основы</title>
 
 <sect2 xml:id="language.oop5.basic.class">
  <title>class</title>
  <para>
   Каждое определение класса начинается с ключевого слова <literal>class</literal>, затем
   следует имя класса, и далее пара фигурных скобок, которые заключают в себе определение
   свойств и методов этого класса.
  </para>
  <para>
   Именем класса может быть любое слово, при условии, что оно не входит в список
   <link linkend="reserved">зарезервированных слов</link> PHP, начинается с буквы или
   символа подчеркивания и за которым следует любое количество букв, цифр или символов
   подчеркивания. Если задать эти правила в виде регулярного выражения, то получится
   следующее выражение: <code>^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$</code>.
  </para>
  <para>
   Класс может содержать собственные <link linkend="language.oop5.constants">константы</link>,
   <link linkend="language.oop5.properties">переменные</link> (называемые свойствами) и функции (называемые  методами).
  </para>
  <example>
   <title>Простое определение класса</title>
   <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // объявление свойства
    public $var = 'значение по умолчанию';

    // объявление метода
    public function displayVar() {
        echo $this->var;
    }
}
?>
]]>
   </programlisting>
  </example>
  <para>
   Псевдопеременная <varname>$this</varname> доступна в том случае,
   если метод был вызван в контексте объекта. <varname>$this</varname>
   является ссылкой на вызываемый объект. Обычно это тот объект, которому
   принадлежит вызванный метод, но может быть и другой объект, если метод был
   вызван <link linkend="language.oop5.static">статически</link> из контекста
   другого объекта.
   Начиная с PHP 7.0.0, вызов нестатического метода статическим способом из
   неподходящего контекста приведет к тому, что $this будет неопределен внутри метода.
   Вызов нестатического метода статическим способом из неподходящего контекста было
   объявлено устаревшим в PHP 5.6.0. Начиная с PHP 7.0.0, подобный вызов объявлен
   совсем устаревшим (если только вызов не произошел из подходящего контекста).
   До PHP 5.6.0, подобные вызовы уже сопровождались строгим уведомлением.
  </para>
  <para>
   <example xml:id="language.oop5.basic.class.this">
    <title>Несколько примеров с псевдопеременной <varname>$this</varname></title>
    <simpara>
     Мы предполагаем, что error_reporting отключен для этого примера; в противном случае
     следующий код, в зависимости от версии PHP, вызовет предупреждения уровней
     "устаревшее" или "строгое".
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
class A
{
    function foo()
    {
        if (isset($this)) {
            echo '$this определена (';
            echo get_class($this);
            echo ")\n";
        } else {
            echo "\$this не определена.\n";
        }
    }
}

class B
{
    function bar()
    {
        A::foo();
    }
}

$a = new A();
$a->foo();

A::foo();

$b = new B();
$b->bar();

B::bar();
?>
]]>
     </programlisting>
     &example.outputs.5;
     <screen>
<![CDATA[
$this определена (A)
$this не определена.
$this определена (B)
$this не определена.
]]>
     </screen>
     &example.outputs.7;
     <screen>
<![CDATA[
$this определена (A)
$this не определена.
$this не определена.
$this не определена.
]]>
     </screen>
    </example>
  </para>
 </sect2>
 
 <sect2 xml:id="language.oop5.basic.new">
  <title>new</title>
  <para>
   Для создания экземпляра класса используется директива <literal>new</literal>.
   Новый объект всегда будет создан, за исключением случаев, когда он содержит 
   <link linkend="language.oop5.decon">конструктор</link>, в котором определен вызов
   <link linkend="language.exceptions">исключения</link> в случае ошибки.
   Рекомендуется определять классы до создания их экземпляров 
   (в некоторых случаях это обязательно).
  </para>
  <para>
   Если с директивой <literal>new</literal> используется строка (<type>string</type>), 
   содержащая имя класса, то будет создан новый экземпляр этого класса. Если
   имя находится в пространстве имен, то оно должно быть задано полностью.
  </para>
  
   <note>
    <para>
     В случае отсутствия аргументов в конструктор класса,
     круглые скобки после названия класса можно опустить.
    </para>
   </note>
  
  <example>
   <title>Создание экземпляра класса</title>
   <programlisting role="php">
<![CDATA[
<?php
$instance = new SimpleClass();

// Это же можно сделать с помощью переменной:
$className = 'SimpleClass';
$instance = new $className(); // new SimpleClass()
?>
]]>
    </programlisting>
   </example>
   <para>
    В контексте класса можно создать новый объект через
    <literal>new self</literal> и <literal>new parent</literal>.
   </para>
   <para>
    Когда происходит присвоение уже существующего экземпляра класса новой
    переменной, то эта переменная будет указывать на этот же экземпляр класса.
    То же самое происходит и при
    передаче экземпляра класса в функцию. Копию уже созданного объекта
    можно создать через ее <link linkend="language.oop5.cloning">клонирование</link>.
   </para>
   <example>
    <title>Присваивание объекта</title>
    <programlisting role="php">
<![CDATA[
<?php

$instance = new SimpleClass();

$assigned   =  $instance;
$reference  =& $instance;

$instance->var = '$assigned будет иметь это значение';

$instance = null; // $instance и $reference становятся null

var_dump($instance);
var_dump($reference);
var_dump($assigned);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
NULL
object(SimpleClass)#1 (1) {
   ["var"]=>
     string(30) "$assigned будет иметь это значение"
}
]]>
    </screen>
   </example>
   <para>
    В PHP 5.3.0 введены несколько новых методов создания экземпляров
    объекта:
   </para>
   <example>
    <title>Создание новых объектов</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    static public function getNew()
    {
        return new static;
    }
}

class Child extends Test
{}

$obj1 = new Test();
$obj2 = new $obj1;
var_dump($obj1 !== $obj2);

$obj3 = Test::getNew();
var_dump($obj3 instanceof Test);

$obj4 = Child::getNew();
var_dump($obj4 instanceof Child);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(true)
bool(true)
]]>
    </screen>
   </example>
   <para>
    В PHP 5.4.0 введена возможность обратиться к свойству или методу только что созданного 
    объекта в одном выражении:
   </para>
   <example>
    <title>Доступ к свойствам/методам только что созданного объекта</title>
    <programlisting role="php">
<![CDATA[
<?php
echo (new DateTime())->format('Y');
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
2016
]]>
    </screen>
   </example>
  
  <note>
    <simpara>
     До PHP 7.1 аргументы не имели значения, если 
     не определена функция конструктора.
    </simpara>
   </note>
 </sect2>
 <sect2 xml:id="language.oop5.basic.properties-methods">
  <title>Свойства и методы</title>
  <para>
   Свойства и методы класса живут в разделенных "пространствах имен", так что
   возможно иметь свойство и метод с одним и тем же именем.
   Ссылки как на свойства, так и на методы имеют одинаковую нотацию, и получается,
   что получите вы доступ к свойству или же вызовете метод - определяется контекстом
   использования.
  </para>
  <example>
   <title>Доступ к свойству vs. вызов метода</title>
   <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public $bar = 'свойство';
    
    public function bar() {
        return 'метод';
    }
}

$obj = new Foo();
echo $obj->bar, PHP_EOL, $obj->bar(), PHP_EOL;
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
свойство
метод
]]>
  </screen>
   </example>
   <para>
    Это означает, что вызвать <link linkend="functions.anonymous">анонимную
    функцию</link>, присвоенную переменной, напрямую не получится.
    Вместо этого свойство должно быть назначено, например, переменной.
    Начиная с PHP 7.0.0, можно вызвать такое свойство напрямую, заключив его
    в скобки.
   </para>
   <example>
    <title>Вызов анонимной функции, содержащейся в свойстве</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public $bar;
    
    public function __construct() {
        $this->bar = function() {
            return 42;
        };
    }
}

$obj = new Foo();

// Начиная с PHP 5.3.0:
$func = $obj->bar;
echo $func(), PHP_EOL;

// Или так, начиная с PHP 7.0.0:
echo ($obj->bar)(), PHP_EOL;
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
42
]]>
  </screen>
   </example>
 </sect2>
 <sect2 xml:id="language.oop5.basic.extends">
  <title>extends</title>
  <para>
   Класс может наследовать методы и свойства другого класса используя
   ключевое слово <literal>extends</literal> в его объявлении. Невозможно наследовать несколько
   классов, один класс может наследовать только один базовый класс.
  </para>
  <para>
   Наследуемые методы и свойства могут быть переопределены (за исключением
   случаев, когда метод класса объявлен как <link linkend="language.oop5.final">final</link>)
   путем объявления их с теми же именами, как и в родительском классе.
   Существует возможность доступа к переопределенным методам или статическим 
   свойствам путем обращения к ним через
   <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>
  </para>
  <para>
   При переопределении методов количество и типы аргументов должны оставаться 
   такими же, как и были, иначе PHP вызовет ошибку уровня <constant>E_STRICT</constant>.
   Это не относится к конструктору, который можно
   переопределить с другими параметрами.
  </para>
  <example>
   <title>Простое наследование классов</title>
   <programlisting role="php">
<![CDATA[
<?php
class ExtendClass extends SimpleClass
{
    // Переопределение метода родителя
    function displayVar()
    {
        echo "Расширенный класс\n";
        parent::displayVar();
    }
}

$extended = new ExtendClass();
$extended->displayVar();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Расширенный класс
значение по умолчанию
]]>
    </screen>
   </example>
 </sect2>
 
 <sect2 xml:id="language.oop5.basic.class.class">
  <title>::class</title>
  
  <para>
   Ключевое слово <literal>class</literal> используется
   для разрешения имени класса. С помощью конструкции <literal>ClassName::class</literal>
   можно получить строку с абсолютным именем класса <literal>ClassName</literal>.
   Обычно это довольно полезно при работе с классами, использующими
   <link linkend="language.namespaces">пространства имен</link>.
  </para>
  <para>
   <example xml:id="language.oop5.basic.class.class.name">
    <title>Разрешение имени класса</title>
    <programlisting role="php">
<![CDATA[
<?php
namespace NS {
    class ClassName {
    }

    echo ClassName::class;
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
NS\ClassName
]]>
     </screen>
    </example>
   </para>
   <note>
    <para>Разрешение имен класса с использованием <literal>::class</literal> происходит
     на этапе компиляции. Это означает, что на момент создания строки с именем класса
     автозагрузки класса не происходит. Как следствие, имена классов раскрываются, даже
     если класс не существует. Ошибка в этом случае не выдается. 
    </para>
    <example xml:id="language.oop5.basic.class.class.fail">
     <title>Отсутствует разрешение имени класса</title>
     <programlisting role="php">
<![CDATA[
<?php
print Some\Class\DoesNot\Exist::class;
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Some\Class\Does\Not\Exist
]]>
     </screen>
    </example>
   </note>
  <para>
   Начиная с PHP 8.0.0, константа <literal>::class</literal> также может использоваться 
   для объектов. Это разрешение происходит во время выполнения, а не во время компиляции. 
   Тоже самое, что и при вызове <function>get_class</function> для объекта.
   </para>
   <example xml:id="language.oop5.basic.class.class.object">
    <title>Разрешение имени объекта</title>
    <programlisting role="php">
<![CDATA[
<?php
namespace NS {
    class ClassName {
    }
}
$c = new ClassName();
print $c::class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NS\ClassName
]]>
    </screen>
   </example>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
