<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 351129 Maintainer: shein Status: ready -->
<!-- Reviewed: yes -->
<!-- $Revision$ -->
<sect1 xml:id="language.oop5.decon" xmlns="http://docbook.org/ns/docbook">
 <title>Конструкторы и деструкторы</title>
 
 <sect2 xml:id="language.oop5.decon.constructor">
  <title>Конструктор</title>
   <methodsynopsis xml:id="object.construct">
    <type>void</type><methodname>__construct</methodname>
    <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter><initializer>""</initializer></methodparam>
   </methodsynopsis>
  <para>
   PHP 5 позволяет объявлять методы-конструкторы. Классы, в которых
   объявлен метод-конструктор, будут вызывать этот метод при каждом
   создании нового объекта, так что это может оказаться полезным,
   например, для инициализации какого-либо состояния объекта
   перед его использованием.
  </para>
  <note>
   <simpara>
    Конструкторы, определенные в классах-родителях не вызываются автоматически,
    если дочерний класс определяет собственный конструктор.
    Чтобы вызвать конструктор, объявленный в родительском классе,
    требуется вызвать <function>parent::__construct</function>
    внутри конструктора дочернего класса. Если в дочернем классе
    не определен конструктор, то он может быть унаследован от
    родительского класса как обычный метод (если он не был
    определен как приватный).     
   </simpara>
  </note>
  <example>
   <title>Использование унифицированных конструкторов</title>
   <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
   function __construct() {
       print "Конструктор класса BaseClass\n";
   }
}

class SubClass extends BaseClass {
   function __construct() {
       parent::__construct();
       print "Конструктор класса SubClass\n";
   }
}

class OtherSubClass extends BaseClass {
    // наследует конструктор BaseClass
}

// Конструктор класса BaseClass
$obj = new BaseClass();

// Конструктор класса BaseClass
// Конструктор класса SubClass
$obj = new SubClass();

// Конструктор класса BaseClass
$obj = new OtherSubClass();
?>
]]>
   </programlisting>
  </example>
  <para>
   В целях обратной совместимости, если PHP 5 не может обнаружить
   объявленный метод <link linkend="object.construct">__construct()</link>, то
   вызов конструктора произойдет по устаревшей схеме, через обращение к методу,
   имя которого соответствует имени класса. Может возникнуть только
   одна проблема совместимости старого кода, если в нём присутствуют
   классы с методами <link linkend="object.construct">__construct()</link>,
   использующиеся для других целей.
  </para>
  <!-- Not using an entity because I want specific wording here, since we're
   not deprecating constructors in general. -->
  <warning>
   <simpara>
    Конструкторы старого типа объявлены <emphasis>УСТАРЕВШИМИ</emphasis> в PHP 7.0
    и будут удалены в будущих версиях. В новом коде всегда используйте
    <link linkend="object.construct">__construct()</link>.
   </simpara>
  </warning>
  <para>
   В отличие от других методов, PHP не будет генерировать ошибку
   уровня <constant>E_STRICT</constant>, если
   <link linkend="object.construct">__construct()</link>
   переопределяется с другими параметрами, отличными от тех,
   которые были объявлены в родительском методе
   <link linkend="object.construct">__construct()</link>.
  </para>
  <para>
   Начиная с PHP 5.3.3, методы с именами, совпадающими с 
   последним элемeнтом имени класса, находящимся в пространстве имен,
   больше не будут считаться конструкторами. Это изменение не влияет
   на классы, не находящиеся в пространстве имен.
  </para>
  <example>
   <title>Конструкторы в классах, находящихся в пространстве имен</title>
   <programlisting role="php">
<![CDATA[
<?php
namespace Foo;
class Bar {
    public function Bar() {
        // рассматривается как конструктор в версиях PHP 5.3.0-5.3.2
        // и как обычный метод, начиная с версии PHP 5.3.3
    }
}
?>
]]>
    </programlisting>
  </example>
 </sect2>
 
 <sect2 xml:id="language.oop5.decon.destructor">
  <title>Деструкторы</title>
  <methodsynopsis xml:id="object.destruct">
   <type>void</type><methodname>__destruct</methodname>
   <void />
  </methodsynopsis>
  <para>
   PHP 5 предоставляет концепцию деструктора, аналогичную с той, которая
   применяется в других ОО-языках, таких как C++.
   Деструктор будет вызван при освобождении всех ссылок
   на определенный объект или при завершении
   скрипта (порядок выполнения деструкторов не гарантируется).
  </para>
  <example>
   <title>Пример использования деструктора</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyDestructableClass
{
   function __construct() {
       print "Конструктор\n";
   }

   function __destruct() {
       print "Уничтожается " . __CLASS__  . "\n";
   }
}

$obj = new MyDestructableClass();

]]>
    </programlisting>
   </example>
   <para>
    Как и в случае с конструкторами, деструкторы, объявленные
    в родительском классе, не будут вызываться автоматически.
    Для вызова деструктора родительского класса,
    требуется вызвать <function>parent::__destruct</function> в
    теле деструктора дочернего класса. Подобно конструкторам, дочерний класс может унаследовать
    деструктор из родительского класса, если он не определен в нем.
   </para>
   <para>
    Деструктор будет вызываться даже в том случае, если скрипт был остановлен с
    помощью функции <function>exit</function>. Вызов <function>exit</function>
    в деструкторе предотвратит запуск всех последующих функций завершения.
   </para>
   <note>
    <para>
     Деструкторы, вызываемые при завершении скрипта, вызываются после отправки
     HTTP-заголовков. Рабочая директория во время фазы завершения скрипта
     может отличаться в некоторых SAPI (например, в Apache).
    </para>
   </note>
   <note>
    <para>
     Попытка выбросить исключение из деструктора (вызываемого во время
     завершения скрипта) вызывает фатальную ошибку.
    </para>
   </note>
 </sect2>
 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
