<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351133 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongowritebatch.add" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoWriteBatch::add</refname>
  <refpurpose>Добавляет операцию записи в пакет</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>MongoWriteBatch::add</methodname>
   <methodparam><type>array</type><parameter>item</parameter></methodparam>
  </methodsynopsis>
  <para>
   Добавляет операцию записи в пакет.
  </para>
  <para>
   Если пакет с <parameter>$item</parameter> превышает размеры 
   <literal>maxWriteBatchSize</literal> или <literal>maxBsonObjectSize</literal>, 
   драйвер разделит пакеты на несколько команд записи 
   при вызове <methodname>MongoWriteBatch::execute</methodname>.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>item</parameter></term>
    <listitem>
     <para>
      Массив, описывающий операцию записи. 
      Структура этого значения зависит от типа операции пакета.
      <informaltable>
       <thead>
        <row>
         <entry>Тип пакета</entry>
         <entry>Ожидаемый аргумент</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><constant>MongoWriteBatch::COMMAND_INSERT</constant></entry>
         <entry>
          <simpara>Документ для добавления.</simpara>
         </entry>
        </row>
        <row>
         <entry><constant>MongoWriteBatch::COMMAND_UPDATE</constant></entry>
         <entry>
          <para>Операция необработанного обновления.</para>
          <para>
           Обязательными ключами являются <literal>"q"</literal> и <literal>"u"</literal>, 
           которые соответствуют параметрам <link linkend="mongocollection.update.criteria"><parameter>$criteria</parameter></link> 
           и <link linkend="mongocollection.update.new_object"><parameter>$new_object</parameter></link> 
           в <function>MongoCollection::update</function> соответственно.
          </para>
          <para>
           Необязательными ключами являются <literal>"multi"</literal> и <literal>"upsert"</literal>, 
           которые соответствуют опциям <link linkend="mongocollection.update.multiple"><literal>"multiple"</literal></link> 
           и <link linkend="mongocollection.update.upsert"><literal>"upsert"</literal></link> для 
           <function>MongoCollection::update</function> соответственно. 
           Если не указано, обе опции по умолчанию имеют значение &false;.
          </para>
         </entry>
        </row>
        <row>
         <entry><constant>MongoWriteBatch::COMMAND_DELETE</constant></entry>
         <entry>
          <para>Операция необработанного удаления.</para>
          <para>
           Обязательные ключи: <literal>"q"</literal> и <literal>"limit"</literal>, 
           которые соответствуют параметру <link linkend="mongocollection.remove.criteria">
           <parameter>$criteria</parameter></link> 
           и опции <link linkend="mongocollection.remove.justone"><literal>"justOne"</literal></link> 
           <function>MongoCollection::remove</function>, соответственно.
          </para>
          <para>
           Параметр <literal>"limit"</literal> является <type>int</type>; 
           однако MongoDB в настоящее время поддерживает только <literal>0</literal> (то есть удалить все соответствующие документы) 
           и <literal>1</literal> (то есть удалить не более одного соответствующего документа).
          </para>
         </entry>
        </row>
       </tbody>
      </informaltable>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает &true; в случае успешного выполнения, 
   выдает исключение в противном случае.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <simplelist>
   <member><classname>Exception</classname> при сбое анализа параметров</member>
   <member><classname>Exception</classname> из-за ошибок проверки аргументов (например, отсутствующие ключи)</member>
  </simplelist>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="mongowritebatch.add.example.insert">
   <title>Пример использования <methodname>MongoWriteBatch::add</methodname></title>
   <para>
    Пакетная операция вставки
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$mc = new MongoClient("localhost");
$collection = $mc->selectCollection("test", "test");


$docs = array();
$docs[] = array("my" => "demo");
$docs[] = array("is" => "working");
$docs[] = array("pretty" => "well");

$batch = new MongoInsertBatch($collection);
foreach($docs as $document) {
    $batch->add($document);
}
$batch->execute(array("w" => 1));
?>
]]>
   </programlisting>
  </example>
  
  <example xml:id="mongowritebatch.add.example.update">
   <title>Пример использования <methodname>MongoWriteBatch::add</methodname></title>
   <para>
    Пакетная операция обновления
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$mc = new MongoClient("localhost");
$collection = $mc->selectCollection("test", "test");


$item1 = array(
    "q" => array("my" => "demo"),
    "u" => array('$set' => array("try" => 1)),
    "multi"  => false, /* значение по умолчанию */
    "upsert" => false, /* значение по умолчанию */
);
$item2 = array(
    "q" => array("is" => "working"),
    "u" => array('$set' => array("try" => 2)),
    "multi" => true,
);
$item3 = array(
    "q" => array("created" => "new-document"),
    "u" => array('$set' => array("try" => 3)),
    "upsert" => true,
);

$batch = new MongoUpdateBatch($collection);
$batch->add($item1);
$batch->add($item2);
$batch->add($item3);
$batch->execute(array("w" => 1));

?>
]]>
   </programlisting>
  </example>
  
  <example xml:id="mongowritebatch.add.example.delete">
   <title>Пример использования <methodname>MongoWriteBatch::add</methodname></title>
   <para>
    Пакетная операция удаления
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$mc = new MongoClient("localhost");
$collection = $mc->selectCollection("test", "test");


$item1 = array(
    "q" => array("my" => "demo"),
    "limit" => 1,
);
$item2 = array(
    "q" => array("try" => 3),
    "limit" => 1,
);


$batch = new MongoDeleteBatch($collection);
$batch->add($item1);
$batch->add($item2);
$batch->execute(array("w" => 1));
?>
]]>
   </programlisting>
  </example>
 </refsect1>
 
 
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
