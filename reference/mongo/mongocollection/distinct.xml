<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 351135 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
<refentry xml:id="mongocollection.distinct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::distinct</refname>
  <refpurpose>Возвращает список уникальных значений для данного ключа в коллекции</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>array</type><type>false</type></type><methodname>MongoCollection::distinct</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>
   Команда distinct возвращает список уникальных значений для данного ключа в коллекции.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>key</parameter></term>
    <listitem>
     <para>
      Ключ, используемый для получения уникальных значений
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>query</parameter></term>
    <listitem>
     <para>
      Опциональные параметры запроса.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает массив уникальных значений, &return.falseforfailure;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="mongocollection.distinct.basic">
   <title>Пример использования <methodname>MongoCollection::distinct</methodname></title>
   <programlisting role="php">
    <![CDATA[
<?php
// Подключение и создание документа и коллекции
$m = new Mongo;
$db = $m->selectDB("test");
$db->dropCollection("distinct");
$c = $db->distinct;

// Вставка данных в коллекцию
$c->insert(array("stuff" => "bar", "zip-code" => 10010));
$c->insert(array("stuff" => "foo", "zip-code" => 10010));
$c->insert(array("stuff" => "bar", "zip-code" => 99701), array("w" => 1));

// Получение уникальных данных по ключу zip-code
$retval = $c->distinct("zip-code");
var_dump($retval);

// Получение уникальных данных по ключу zip-code с использованием запроса
$retval = $c->distinct("zip-code", array("stuff" => "foo"));
var_dump($retval);

$retval = $c->distinct("zip-code", array("stuff" => "bar"));
var_dump($retval);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
array(2) {
  [0]=>
  int(10010)
  [1]=>
  int(99701)
}
array(1) {
  [0]=>
  int(10010)
}
array(2) {
  [0]=>
  int(10010)
  [1]=>
  int(99701)
}
]]>
   </screen>
  </example>
  <example xml:id="mongocollection.distinct.basic-embedded">
   <title>Пример использования <methodname>MongoCollection::distinct</methodname> с вложенным документом</title>
   <programlisting role="php">
    <![CDATA[
<?php
$c->insert(array("user" => array("points" => 25)));
$c->insert(array("user" => array("points" => 31)));
$c->insert(array("user" => array("points" => 25)));

$retval = $c->distinct("user.points");
var_dump($retval);

$retval = $c->distinct("user.nonexisting");
var_dump($retval);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
array(2) {
  [0]=>
  int(25)
  [1]=>
  int(31)
}
array(0) {
}
]]>
   </screen>
  </example>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
