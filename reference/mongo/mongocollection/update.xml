<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350988 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocollection.update" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::update</refname>
  <refpurpose>Обновляет записи на основе заданных критериев</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool|array</type><methodname>MongoCollection::update</methodname>
   <methodparam><type>array</type><parameter>criteria</parameter></methodparam>
   <methodparam><type>array</type><parameter>new_object</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry xml:id="mongocollection.update.criteria">
     <term>
      <parameter>criteria</parameter>
     </term>
     <listitem>
      <para>
       Критерии запроса документов для обновления.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="mongocollection.update.new_object">
     <term>
      <parameter>new_object</parameter>
     </term>
     <listitem>
      <para>
       Объект, используемый для обновления сопоставленных документов. 
       Может содержать операторы обновления (для изменения определенных полей) 
       или документ замены.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Массив опций для операции обновления. 
       В настоящее время доступны следующие варианты:
       <itemizedlist>
        <listitem xml:id="mongocollection.update.upsert">
         <para>
          <literal>"upsert"</literal>
         </para>
         <para>
          Если ни один документ не соответствует <parameter>$criteria</parameter>, 
          будет добавлен новый документ.
         </para>
         <para>
          Если новый документ будет вставлен, а 
          <parameter>$new_object</parameter> содержит атомарные модификаторы 
          (то есть операторы <literal>$</literal>), эти операции будут применены 
          к параметру <parameter>$criteria</parameter> для создания нового документа. 
          Если <parameter>$new_object</parameter> не содержит атомарных модификаторов, 
          он будет использоваться как есть для вставленного документа. 
          Смотрите приведенные ниже примеры для получения дополнительной информации.
         </para>
        </listitem>
        <listitem xml:id="mongocollection.update.multiple">
         <para>
          <literal>"multiple"</literal>
         </para>
         <para>
          Все документы, соответствующие $criteria, будут обновлены. 
          <function>MongoCollection::update</function> имеет совершенно 
          противоположное поведение <function>MongoCollection::remove</function>: 
          он обновляет один документ по умолчанию, а не все соответствующие документы. 
          <emphasis>Рекомендуется всегда указывать, хотите ли вы обновить несколько документов 
           или один документ</emphasis>, поскольку база данных может изменить 
          свое поведение по умолчанию в какой-то момент в будущем.
         </para>
        </listitem>
        &mongo.writes.parameters.fsync;
        &mongo.writes.parameters.journal;
        &mongo.writes.parameters.sockettimeoutms;
        &mongo.writes.parameters.writeconcern;
        &mongo.writes.parameters.writeconcerntimeoutms;
       </itemizedlist>
      </para>
      <para>
       Следующие параметры устарели и больше не должны использоваться:
       <itemizedlist>
        &mongo.writes.parameters.safe;
        &mongo.writes.parameters.timeout;
        &mongo.writes.parameters.writeconcerntimeout;
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает массив, содержащий состояние обновления, 
   если установлена опция <literal>"w"</literal>. В противном случае возвращает &true;.
  </para>
  <para>
   Поля в массиве статуса описаны в документации 
   к <function>MongoCollection::insert</function>.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &mongo.errors.exceptions.writeconcern;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongo 1.5.0</entry>
       <entry>
        <para>
         Добавлена опция <literal>"wTimeoutMS"</literal>, 
         которая заменяет <literal>"wtimeout"</literal>. 
         Выдает <constant>E_DEPRECATED</constant>, 
         когда используется <literal>"wtimeout"</literal>.
        </para>
        <para>
         Добавлена опция <literal>"socketTimeoutMS"</literal>, 
         которая заменяет <literal>"timeout"</literal>. 
         Выдает <constant>E_DEPRECATED</constant>, 
         когда используется <literal>"timeout"</literal>.
        </para>
        <para>
         Выдает <constant>E_DEPRECATED</constant>, 
         когда используется <literal>"safe"</literal>.
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.3.4</entry>
       <entry>Добавлена опция <literal>"wtimeout"</literal>.</entry>
      </row>
      <row>
       <entry>PECL mongo 1.3.0</entry>
       <entry>
        <para>Добавлена опция <literal>"w"</literal>.</para>
        <para>
         Параметр <parameter>options</parameter> больше не принимает 
         логическое значение для обозначения слияния. 
         Вместо этого теперь необходимо указывать 
         <literal>array('upsert' => true)</literal>.
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.2.11</entry>
       <entry>
        Выдает <constant>E_DEPRECATED</constant>, когда
        <parameter>options</parameter> являются <type>scalar</type>.
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.2.0</entry>
       <entry>Добавлена опция <literal>"timeout"</literal>.</entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.11</entry>
       <entry>
        Отключается при ошибках "not master", если установлен <literal>"safe"</literal>.
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.9</entry>
       <entry>
        <para>
         Добавлена возможность передавать целые числа в опцию <literal>"safe"</literal>, 
         которая ранее принимала только логические значения.
        </para>
        <para>
         Добавлена опция <literal>"fsync"</literal>.
        </para>
        <para>
         Тип возвращаемого значения был изменен на массив, 
         содержащий информацию об ошибке, если используется параметр <literal>"safe"</literal>. 
         В противном случае логическое значение возвращается, как и раньше.
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.5</entry>
       <entry>Добавлена опция <literal>"safe"</literal>.</entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.1</entry>
       <entry>
        Изменен параметр <parameter>options</parameter> с логического на массив. 
        До версии 1.0.1 вторым параметром было необязательное логическое значение, 
        определяющее слияние.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Пример использования <function>MongoCollection::update</function></title>
   <para>
    Добавление адресного поля в документ.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->insert(array("firstname" => "Bob", "lastname" => "Jones" ));
$newdata = array('$set' => array("address" => "1 Smith Lane"));
$c->update(array("firstname" => "Bob"), $newdata);

var_dump($c->findOne(array("firstname" => "Bob")));

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(4) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["firstname"]=>
  string(3) "Bob"
  ["lastname"]=>
  string(5) "Jones"
  ["address"]=>
  string(12) "1 Smith Lane"
}
]]>
   </screen>
  </example>
  <example>
   <title>Пример использования слияния <function>MongoCollection::update</function></title>
   <para>
    Слияние может упростить код, так как одна строка может создать документ, 
    если он не существует (на основе <parameter>$criteria</parameter>), 
    или обновить существующий документ, если он соответствует.
   </para>
   <para>
    В следующем примере <parameter>$new_object</parameter> содержит атомарный модификатор. 
    Поскольку коллекция пуста и слияние должно вставить новый документ, 
    он будет применять эти операции к параметру <parameter>$criteria</parameter> 
    для создания документа.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->drop();
$c->update(
    array("uri" => "/summer_pics"),
    array('$inc' => array("page hits" => 1)),
    array("upsert" => true)
);
var_dump($c->findOne());

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#9 (0) {
  }
  ["uri"]=>
  string(12) "/summer_pics"
  ["page hits"]=>
  int(1)
}
]]>
   </screen>
   <para>
    Если <parameter>$new_object</parameter> не содержит атомарных модификаторов 
    (то есть операторов <literal>$</literal>), слияние будет использовать 
    <parameter>$new_object</parameter> как есть для нового документа. 
    Это соответствует поведению обычного обновления, когда отсутствие 
    атомарных модификаторов приводит к перезаписи документа.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->drop();
$c->update(
    array("name" => "joe"),
    array("username" => "joe312", "createdAt" => new MongoDate()), 
    array("upsert" => true)
);
var_dump($c->findOne());

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#10 (0) {
  }
  ["username"]=>
  string(6) "joe312"
  ["createdAt"]=>
  object(MongoDate)#4 (0) {
  }
}
]]>
   </screen>
  </example>
  <example>
   <title>Пример использования множественного <function>MongoCollection::update</function></title>
   <para>
    По умолчанию <function>MongoCollection::update</function> обновляет только первый документ, 
    соответствующий <parameter>$criteria</parameter>, которые он находит. 
    Использование опции "multiple" может переопределить это поведение, если это необходимо.
   </para>
   <para>
    В этом примере поле "gift" добавляется каждому человеку, 
    у которого день рождения на следующий день.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$today = array('$gt' => new MongoDate(), '$lt' => new MongoDate(strtotime("+1 day")));
$people->update(
    array("birthday" => $today),
    array('$set' => array('gift' => $surprise)),
    array("multiple" => true)
);

?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <link linkend="mongo.updates">Документация по PHP по обновлению</link> 
   и <link xlink:href="&url.mongodb.dochub.update;">основная документация MongoDB</link>.
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
