<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351133 Maintainer: lex Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->

<phpdoc:classref xml:id="class.mongocursor" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Класс MongoCursor</title>
 <titleabbrev>MongoCursor</titleabbrev>

 <partintro>

  <!-- {{{ Mongocursor intro -->
  <section xml:id="mongocursor.intro">
   &reftitle.intro;
   <para>
    Курсор используется для итерации результатов запроса к базе данных. 
    Например, чтобы запросить базу данных и увидеть все результаты, вы можете сделать:
    <example xml:id="mongocursor.intro-example">
     <title>Пример использования <classname>MongoCursor</classname></title>
     <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find();
var_dump(iterator_to_array($cursor));

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Обычно курсоры не создаются с помощью конструктора <classname>MongoCursor</classname>. 
    Вы получаете новый курсор, вызывая <function>MongoCollection::find</function> (как показано выше).
   </para>
   <para>
    Предположим, что в приведенном выше примере <literal>$collection</literal> была коллекцией 50 Гб. 
    Мы, конечно, не хотим загружать все сразу в память, для этого нужен курсор: 
    позволить клиенту получить доступ к коллекции по частям.
   </para>
   <para>
    Если у нас большой набор результатов, мы можем выполнить итерацию, 
    загружая несколько мегабайт результатов в память за раз. Например, мы могли бы сделать:
    <example>
     <title>Итерации <classname>MongoCursor</classname></title>
     <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find();

foreach ($cursor as $doc) {
    // делаем что-нибудь с каждым документом
}

?>
]]>
     </programlisting>
    </example>
    Здесь мы проходим через каждый документ в коллекции, загружаем и собираем документы коллекции по мере необходимости.
   </para>
   <para>
    Обратите внимание, это означает, что курсор не содержит результаты базы данных, он просто управляет ими. 
    Таким образом, если вы печатаете курсор (скажем, с помощью <function>var_dump</function> 
    или <function>print_r</function>), вы просто получите объект курсора, а не документы. 
    Чтобы получить сами документы, вы можете использовать один из способов, показанных выше.
   </para>
  </section>

  <section>
   <title>Стадии курсора</title>
   <para>
    <classname>MongoCursor</classname> имеет две "жизненные стадии": до и после выполнения запроса.
    Когда курсор создан, он еще не связался с базой данных, поэтому он находится в состоянии перед выполнением запроса. 
    В этом состоянии клиент может дополнительно указать, что он хочет сделать запросом, 
    включая добавление ограничений, пропусков, сортировок и более сложных параметров.
   </para>
   <para>
    Когда клиент пытается получить результат (вызывая <function>MongoCursor::next</function>, прямо или косвенно), 
    курсор перемещается в стадию после выполнения запроса. На данный момент запрос был выполнен базой данных и больше не может быть изменен.
   </para>
   <para>
    <example xml:id="mongocursor.stages.adding-options">
     <title>Добавление параметров в <classname>MongoCursor</classname></title>
     <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find()->limit(10);

// База данных еще не опрошена, поэтому можно добавить дополнительные параметры поиска
$cursor = $cursor->sort(array("a" => 1));

var_dump($cursor->getNext());
// теперь база данных была опрошена и больше опций не может быть добавлено

// так что это вызовет исключение:
$cursor->skip(4);
?>
]]>
     </programlisting>
    </example>
   </para>
  </section>
  <!-- }}} -->

  <section xml:id="mongocursor.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoCursor</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>MongoCursor</classname>
     </ooclass>
     <oointerface>
      <interfacename>MongoCursorInterface</interfacename>
     </oointerface>
     <oointerface>
      <interfacename>Iterator</interfacename>
     </oointerface>
    </classsynopsisinfo>
    <!-- }}} -->
    
    <classsynopsisinfo role="comment">Статичные поля</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>static</modifier>
     <type>bool</type>
     <varname linkend="mongocursor.props.slaveokay">slaveOkay</varname>
     <initializer>&false;</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>static</modifier>
     <type>int</type>
     <varname linkend="mongocursor.props.timeout">timeout</varname>
     <initializer>30000</initializer>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongocursor')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->

  </section>

  <section>
   <title>Статические переменные</title>

   <variablelist>
    <varlistentry xml:id="mongocursor.props.slaveokay">
     <term><varname>slaveOkay</varname></term>
     <listitem>
      <para>
       Установленный в запросе флаг "slaveOkay", 
       позволяет выполнять чтение на вторичном сервере 
       (вторичные по умолчанию предназначены только для резервного копирования и не запрашиваются).
       Может быть переопределен с помощью <function>MongoCursor::slaveOkay</function>.
      </para>
      <para>
       Эта функциональность <emphasis>устарела</emphasis>. Пожалуйста, используйте вместо этого <xref linkend="mongo.readpreferences" />.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="mongocursor.props.timeout">
     <term><varname>timeout</varname></term>
     <listitem>
      <para>
       Установите время ожидания в миллисекундах для ответов базы данных. 
       Используйте <literal>-1</literal>, чтобы ждать вечно. 
       Может быть переопределено с помощью <function>MongoCursor::timeout</function>. 
       Не приводит к тому, что сервер MongoDB отменяет операцию;
       только к указанию драйверу прекратить ждать ответа 
       и выдать исключение <classname>MongoCursorTimeoutException</classname> по истечении заданного времени.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>

  <section role="seealso">
   &reftitle.seealso;
   <para>
    Для получения дополнительной информации о курсорах в MongoDB 
    смотрите <link xlink:href="&url.mongodb.dochub.cursors;">документацию</link>.
   </para>
  </section>

 </partintro>

 &reference.mongo.entities.mongocursor;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
