<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 351129 Maintainer: shein Status: ready -->
<!-- Reviewed: yes -->
<!-- $Revision$ -->
<refentry xml:id="function.debug-zval-dump" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>debug_zval_dump</refname>
  <refpurpose>Выводит строковое представление внутреннего значения zend</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>debug_zval_dump</methodname>
   <methodparam><type>mixed</type><parameter>variable</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>variables</parameter></methodparam>
  </methodsynopsis>
  <para>
   Выводит строковое представление внутреннего значения zend.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>variable</parameter></term>
     <listitem>
      <para>
       Обрабатываемая переменная.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>variables</parameter></term>
     <listitem>
      <para>
       Следующие переменные для обработки.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>debug_zval_dump</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello World';
$var2 = '';

$var2 =& $var1;

debug_zval_dump(&$var1);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
&string(11) "Hello World" refcount(3)
]]>
    </screen>
   </example>
  </para>
  <note>
   <title>Предостережение по поводу <literal>refcount</literal></title>
   <para>
    Значение <literal>refcount</literal>, возвращаемое этой функцией,
    в некоторых случаях неочевидно. Например, разработчик может
    ожидать, что в приведенном выше примере значение <literal>refcount</literal> будет
    <literal>2</literal>. Третья ссылка была создана в момент
    вызова <function>debug_zval_dump</function>.
   </para>
   <para>
    Это поведение более сложно, когда переменная не передается в функцию
    <function>debug_zval_dump</function> по ссылке. Для иллюстрации рассмотрим
    немного измененный вариант приведенного выше примера:
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello World';
$var2 = '';

$var2 =& $var1;

debug_zval_dump($var1); // в этот раз не передается по ссылке
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(11) "Hello World" refcount(1)
]]>
     </screen>
    </example>
   </para>
   <para>
    Почему <literal>refcount(1)</literal>? Потому что копия <literal>$var1</literal>
    создается при вызове функции.
   </para>
   <para>
    Эта функция становится еще <emphasis>более</emphasis> сбивающей с толку, когда
    передается переменная со значением <literal>refcount</literal>, равным <literal>1</literal>
    (копированием по значению):
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello World';

debug_zval_dump($var1);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(11) "Hello World" refcount(2)
]]>
     </screen>
    </example>
   </para>
   <para>
    Значение <literal>refcount</literal>, равное <literal>2</literal>, в данном случае совсем
    непонятно. Особенно учитывая приведенные выше примеры. Так в чем же дело?
   </para>
   <para>
    Когда переменная имеет единственную ссылку (как было с переменной <literal>$var1</literal>,
    перед тем, как ее передали в качестве аргумента в функцию <function>debug_zval_dump</function>),
    процессор PHP оптимизирует метод, которым она передается в функцию.
    Внутренне, PHP рассматривает <literal>$var1</literal> как ссылку (таким образом
    <literal>refcount</literal> увеличивается для области видимости
    функции), при условии, что <emphasis>если</emphasis> в переданную ссылку
    придется производить запись, то будет создана ее копия, но только в момент
    записи. Такое поведение известно как "copy on write."
   </para>
   <para>
    Таким образом, если <function>debug_zval_dump</function> приходится писать в свой единственный
    параметр (а она не делает этого), то будет создана копия. До этого момента
    параметр остается ссылкой, приводя к увеличению <literal>refcount</literal>
    до <literal>2</literal> в области видимости вызова функции.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>var_dump</function></member>
    <member><function>debug_backtrace</function></member>
    <member>"<link linkend="language.references">Ссылки. Разъяснения</link>"</member>
    <member>"<link xlink:href="&url.derick.references;">Ссылки. Разъяснения (от Derick Rethans)</link>"</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
