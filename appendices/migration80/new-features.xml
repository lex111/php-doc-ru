<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351500 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration80.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Новая функциональность</title>

 <sect2 xml:id="migration80.new-features.core">
  <title>Ядро PHP</title>

  <sect3 xml:id="migration80.new-features.core.named-arguments">
   <title>Именованные аргументы</title>

   <para>
    <!-- RFC: https://wiki.php.net/rfc/named_params -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.attributes">
   <title>Атрибуты</title>

   <para>
    Добавлена поддержка атрибутов.
    <!-- RFC: https://wiki.php.net/rfc/attributes_v2 -->
    <!-- RFC: https://wiki.php.net/rfc/attribute_amendments -->
    <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax -->
    <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.property-promotion">
   <title>Упрощённое определение свойств в конструкторе</title>

   <para>
    Добавлена поддержка упрощённого определения свойств в конструкторе (объявление свойств 
    в сигнатуре конструктора).
    <!-- RFC: https://wiki.php.net/rfc/constructor_promotion -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.union-types">
   <title>Union Types</title>

   <para>
    Добавлена поддержка <link linkend="language.types.declarations.union">union types</link>.
    <!-- RFC: https://wiki.php.net/rfc/union_types_v2 -->
   </para> 
  </sect3>

  <sect3 xml:id="migration80.new-features.core.match">
   <title>Выражение Match</title>

   <para>
    Добавлена поддержка <link linkend="control-structures.match">выражения <literal>match</literal></link>.
    <!-- RFC: https://wiki.php.net/rfc/match_expression_v2 -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.nullsafe-operator">
   <title>Оператор Nullsafe</title>

   <para>
    Добавлена поддержка оператора Nullsafe (<literal>?-></literal>).
    <!-- RFC: https://wiki.php.net/rfc/nullsafe_operator -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.others">
   <title>Другие новые функции</title>

   <itemizedlist>
    <listitem>
     <para>
      <!-- we cannot use <classname>WeakMap</classname> because that would link to the wrong class -->
      Добавлен класс <literal>WeakMap</literal>.
      <!-- RFC: https://wiki.php.net/rfc/weak_maps -->
     </para>
    </listitem>
    <listitem>
     <para>
      Добавлен класс <classname>ValueError</classname>.
     </para>
    </listitem>
    <listitem>
     <para>
      Любое количество параметров функции теперь может быть заменено вариативным аргументом, 
      при совместимости типов. Например, теперь следующий код является допустимым:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class A {
     public function method(int $many, string $parameters, $here) {}
}
class B extends A {
     public function method(...$everything) {}
}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      <type>static</type> (как в "позднем статическом связывании") теперь можно использовать как возвращаемый тип:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class Test {
     public function create(): static {
          return new static();
     }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/static_return_type -->
     </para>
    </listitem>
    <listitem>
     <para>
      Теперь можно получить имя класса объекта с помощью 
      <code>$object::class</code>. Результат такой же, что и <code>get_class($object)</code>.
      <!-- RFC: https://wiki.php.net/rfc/class_name_literal_on_object -->
     </para>
    </listitem>
    <listitem>
     <para>
      &new; и &instanceof; теперь можно использовать с произвольными выражениями, 
      используя <code>new (expression)(...$args)</code> и <code>$obj instanceof (expression)</code>.
      <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
     </para>
    </listitem>
    <listitem>
     <para>
      Были внесены некоторые исправления согласованности в синтаксис переменных, например, 
      теперь разрешена запись <code>Foo::BAR::$baz</code>.
      <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
     </para>
    </listitem>
    <listitem>
     <para>
      Добавлен интерфейс <interfacename>Stringable</interfacename>, который автоматически реализуется, если 
      класс определяет метод <link linkend="object.tostring">__toString()</link>.
      <!-- RFC: https://wiki.php.net/rfc/stringable -->
     </para>
    </listitem>
    <listitem>
     <para>
      Теперь трейты могут определять абстрактные закрытые методы.
      Такие методы должны быть реализованы классом с помощью трейта.
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>throw</literal> теперь можно использовать как выражение.
      Это позволяет использовать такие способы, как:
      <programlisting role="php">
<![CDATA[
<?php
$fn = fn() => throw new Exception('Исключение в стрелочной функции');
$user = $session->user ?? throw new Exception('Должен быть пользователь');
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/throw_expression -->
     </para>
    </listitem>
    <listitem>
     <para>
      В списках параметров теперь разрешена необязательная конечная запятая.
      <programlisting role="php">
<![CDATA[
<?php
function functionWithLongSignature(
    Type1 $parameter1,
    Type2 $parameter2, // <-- Эта запятая теперь разрешена.
) {
}
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/trailing_comma_in_parameter_list -->
     </para>
    </listitem>
    <listitem>
     <para>
      Теперь можно написать <code>catch (Exception)</code> для перехвата исключения, 
      не сохраняя его в переменной.
      <!-- RFC: https://wiki.php.net/rfc/non-capturing_catches -->
     </para>
    </listitem>
    <listitem>
     <para>
      Добавлена поддержка типа <type>mixed</type>.
      <!-- RFC: https://wiki.php.net/rfc/mixed_type_v2 -->
     </para>
    </listitem>
    <listitem>
     <para>
      Закрытые методы, объявленные в родительском классе, больше не применяют какие-либо правила наследования для методов 
      дочернего класса (за исключением окончательных закрытых конструкторов).
      В следующем примере показано, какие ограничения были сняты:
      <programlisting role="php">
<![CDATA[
<?php
class ParentClass {
    private function method1() {}
    private function method2() {}
    private static function method3() {}
    // Выдает предупреждение, так как "final" больше не имеет значения:
    private final function method4() {}
}
class ChildClass extends ParentClass {
    // Теперь все следующее разрешено, хотя модификаторы не такие же, 
    // как для закрытых методов в родительском классе.
    public abstract function method1() {}
    public static function method2() {}
    public function method3() {}
    public function method4() {}
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      Добавлена функция <function>get_resource_id</function>, которая возвращает то же значение, 
      что и <code>(int) $resource</code>. Она обеспечивает ту же функциональность при более понятном API.
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.new-features.date">
  <title>Дата и время</title>
  
  <itemizedlist>
   <listitem>
    <para>
     Были добавлены <methodname>DateTime::createFromInterface</methodname> и
     <methodname>DateTimeImmutable::createFromInterface</methodname>.
    </para>
   </listitem>
   <listitem>
    <para>
     Добавлен спецификатор формата DateTime <literal>p</literal>, который аналогичен 
     <literal>P</literal>, но возвращает <literal>Z</literal>, а не <literal>+00:00</literal> 
     для UTC.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.dom">
  <title>DOM</title>

  <para>
   Добавлены <interfacename>DOMParentNode</interfacename> и <interfacename>DOMChildNode</interfacename> с 
   новыми API-интерфейсами обхода и управления.
   <!-- RFC: https://wiki.php.net/rfc/dom_living_standard_api-->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.filter">
  <title>Filter</title>

  <para>
   <constant>FILTER_VALIDATE_BOOL</constant> был добавлен в качестве псевдонима для 
   <constant>FILTER_VALIDATE_BOOLEAN</constant>. Новое имя является предпочтительным, так как оно использует 
   имя канонического типа.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.enchant">
  <title>Enchant</title>

  <para>
   Добавлены <function>enchant_dict_add</function>, <function>enchant_dict_is_added</function> и
   <constant>LIBENCHANT_VERSION</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.fpm">
  <title>FPM</title>

  <para>
   Добавлен новый параметр <literal>pm.status_listen</literal>, который позволяет получать статус 
   с другой конечной точки (например, порта или файла UDS), который полезен для получения статуса, когда все 
   дочерние элементы заняты обслуживанием длительных запросов.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.hash">
  <title>Hash</title>

  <para>
   Теперь объекты <classname>HashContext</classname> можно сериализовать.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.intl">
  <title>Функции интернационализации</title>

  <para>
   Добавлены константы <constant>IntlDateFormatter::RELATIVE_FULL</constant>,
   <constant>IntlDateFormatter::RELATIVE_LONG</constant>,
   <constant>IntlDateFormatter::RELATIVE_MEDIUM</constant> и
   <constant>IntlDateFormatter::RELATIVE_SHORT</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.ldap">
  <title>LDAP</title>

  <para>
   Добавлена функция <function>ldap_count_references</function>, которая возвращает количество 
   ссылочных сообщений в результатах поиска.
  </para>
 </sect2>
 <sect2 xml:id="migration80.new-features.opcache">
  <title>OPcache</title>

  <para>
   Если ini-параметр <!--<link linkend="ini.opcache.record-warnings">-->opcache.record_warnings<!--</link>--> включен, 
   OPcache будет записывать предупреждения во время компиляции и воспроизводить их при следующем включении, даже если 
   они обслуживаются из кеша.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.openssl">
  <title>OpenSSL</title>

  <para>
   Добавлена поддержка синтаксиса криптографических сообщений (CMS) (<link xlink:href="&url.rfc;5652">RFC 5652</link>), 
   состоящего из функций для шифрования, дешифрования, подписи, проверки и чтения. API 
   похож на API для функций PKCS #7 с добавлением новых констант кодирования: 
   <constant>OPENSSL_ENCODING_DER</constant>, <constant>OPENSSL_ENCODING_SMIME</constant>
   и <constant>OPENSSL_ENCODING_PEM</constant>:
   <simplelist>
    <member>
     <function>openssl_cms_encrypt</function> шифрует сообщение в файле с сертификатами 
     и выводит результат в предоставленный файл.
    </member>
    <member>
     <function>openssl_cms_decrypt</function> расшифровывает сообщение S/MIME в файле и выводит 
     результаты в предоставленный файл.
    </member>
    <member>
     <function>openssl_cms_read</function> экспортирует файл CMS в массив сертификатов PEM.
    </member>
    <member>
     <function>openssl_cms_sign</function> подписывает сообщение MIME в файле сертификатом и ключом 
     и выводит результат в предоставленный файл.
    </member>
    <member>
     <function>openssl_cms_verify</function> проверяет, что блок данных не поврежден, подписывающая сторона 
     является тем, кем она являются и возвращает сертификаты подписывающих сторон.
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.pcre">
  <title>Регулярные выражения (совместимые с Perl)</title>

  <para>
   Добавлена функция <function>preg_last_error_msg</function>, которая возвращает человекочитаемое сообщение 
   о последней ошибке PCRE. Она дополняет <function>preg_last_error</function>, который вместо этого возвращает 
   целочисленное значение перечисления.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.reflection">
  <title>Reflection</title>

  <itemizedlist>
   <listitem>
    <para>
     Следующие методы теперь могут возвращать информацию о значениях 
     параметров внутренних функций по умолчанию:
    </para>
    <para>
     <simplelist>
      <member><methodname>ReflectionParameter::isDefaultValueAvailable</methodname></member>
      <member><methodname>ReflectionParameter::getDefaultValue</methodname></member>
      <member><methodname>ReflectionParameter::isDefaultValueConstant</methodname></member>
      <member><methodname>ReflectionParameter::getDefaultValueConstantName</methodname></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   <methodname>SQLite3::setAuthorizer</methodname> и соответствующие константы классов были добавлены для установки 
   callback-функции пользовательского пространства, которая будет использоваться для авторизации или запрета действия в базе данных.
   <!-- PR: https://github.com/php/php-src/pull/4797 -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.standard">
  <title>Библиотека стандартных функций</title>

  <itemizedlist>
   <listitem>
    <para>
     Добавлены функции <function>str_contains</function>, <function>str_starts_with</function> и
     <function>str_ends_with</function>, которые проверяют, содержит ли <parameter>haystack</parameter>, 
     начинается или заканчивается <parameter>needle</parameter> соответственно.
     <!-- RFC: https://wiki.php.net/rfc/str_contains -->
     <!-- RFC: https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions -->
    </para>
   </listitem>
   <listitem>
    <para>
     Добавлена функция <function>fdiv</function>, которая выполняет деление с плавающей запятой в соответствии с семантикой IEEE 754.
     Деление на ноль считается четко определенным и возвращает одно из значений <literal>Inf</literal>,
     <literal>-Inf</literal> или <literal>NaN</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Добавлена функция <function>get_debug_type</function>, которая возвращает тип, полезный для сообщений об ошибках. В отличие от 
     <function>gettype</function>, она использует канонические имена типов, возвращает имена классов для объектов 
     и указывает тип ресурса для ресурсов.
     <!-- RFC: https://wiki.php.net/rfc/get_debug_type -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>printf</function> и ей подобные теперь поддерживают спецификаторы формата <literal>%h</literal> и 
     <literal>%H</literal>. Они такие же, как <literal>%g</literal> и
     <literal>%G</literal>, но всегда используют <literal>"."</literal> в качестве десятичного разделителя, а не 
     определяют его с помощью локали <constant>LC_NUMERIC</constant>.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>printf</function> и ей подобные теперь поддерживают использование <literal>"*"</literal> в качестве ширины 
     или точности, и в этом случае ширина/точность передается в качестве аргумента printf. Это также позволяет 
     использовать точность <literal>-1</literal> с <literal>%g</literal>, <literal>%G</literal>,
     <literal>%h</literal> и <literal>%H</literal>. Например, следующий код можно использовать для 
     воспроизведения форматирования с плавающей запятой по умолчанию PHP:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
printf("%.*H", (int) ini_get("precision"), $float);
printf("%.*H", (int) ini_get("serialize_precision"), $float);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>proc_open</function> теперь поддерживает дескрипторы псевдотерминала (PTY). Следующий код 
     присоединяет <literal>stdin</literal>, <literal>stdout</literal> и <literal>stderr</literal> 
     к одному и тому же PTY:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['pty'], ['pty'], ['pty']], $pipes);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>proc_open</function> теперь поддерживает дескрипторы пары сокетов. Следующий код 
     присоединяет отдельную пару сокетов к <literal>stdin</literal>, <literal>stdout</literal> и
     <literal>stderr</literal>:    
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['socket'], ['socket'], ['socket']], $pipes);
?>
]]>
     </programlisting>
    </para>
    <para>
     В отличие от каналов, сокеты не страдают от проблем с блокировкой ввода-вывода в Windows. Однако не все 
     программы могут корректно работать с сокетами stdio.
    </para>
   </listitem>
   <listitem>
    <para>
     Функции сортировки теперь стабильны, а это означает, что сравниваемые элементы сохранят 
     исходный порядок.
     <!-- RFC: https://wiki.php.net/rfc/stable_sorting -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>array_diff</function>, <function>array_intersect</function> и им подобные 
     теперь могут использоваться с одним массивом в качестве аргумента. Это означает, что теперь возможно использование, 
     подобное следующему:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
// ОК, даже если $excludes пуст:
array_diff($array, ...$excludes);
// ОК, даже если $array содержит только один массив:
array_intersect(...$arrays);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     Параметр <parameter>flag</parameter> функции <function>ob_implicit_flush</function> был изменен, 
     чтобы принимать логическое значение (<type>bool</type>), а не целое число (<type>int</type>).
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.tokenizer">
  <title>Лексер (Tokenizer)</title>

  <para>
   <classname>PhpToken</classname> добавляет объектно-ориентированный интерфейс к PHP-лексеру (tokenizer). Он обеспечивает 
   более единообразное и эргономичное представление, в то же время эффективнее и быстрее.
   <!--  RFC: https://wiki.php.net/rfc/token_as_object -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.zip">
  <title>Zip</title>

  <itemizedlist>
   <listitem>
    <para>
     Модуль Zip обновлен до версии 1.19.1.
    </para>
   </listitem>
   <listitem>
    <para>
     Новые методы <methodname>ZipArchive::setMtimeName</methodname> и
     <methodname>ZipArchive::setMtimeIndex</methodname> для установки времени изменения записи.
    </para>
   </listitem>
   <listitem>
    <para>
     Новый метод <methodname>ZipArchive::setProgressCallback</methodname> для предоставления обновлений во время закрытия архива.
    </para>
   </listitem>
   <listitem>
    <para>
     Новый метод <methodname>ZipArchive::setCancelCallback</methodname>, чтобы разрешить отмену во время закрытия архива.
    </para>
   </listitem>
   <listitem>
    <para>
     Новый метод <methodname>ZipArchive::replaceFile</methodname> для замены содержимого записи.
    </para>
   </listitem>
   <listitem>
    <para>
     Новый метод <methodname>ZipArchive::isCompressionMethodSupported</methodname>, чтобы проверить дополнительные 
     возможности сжатия.
    </para>
   </listitem>
   <listitem>
    <para>
     Новый метод <methodname>ZipArchive::isEncryptionMethodSupported</methodname>, чтобы проверить дополнительные 
     функции шифрования.
    </para>
   </listitem>
   <listitem>
    <para>
     Добавлено свойство <varname>ZipArchive::lastId</varname> для получения значения индекса 
     последней добавленной записи.
    </para>
   </listitem>
   <listitem>
    <para>
     Теперь ошибки можно проверить после закрытия и с помощью свойств 
     <varname>ZipArchive::status</varname> and
     <varname>ZipArchive::statusSys</varname> или метода 
     <methodname>ZipArchive::getStatusString</methodname>.
    </para>
   </listitem>
   <listitem>
    <para>
     Параметр <literal>'remove_path'</literal> для <methodname>ZipArchive::addGlob</methodname> и 
     <methodname>ZipArchive::addPattern</methodname> теперь обрабатывается как произвольный строковый префикс (для 
     согласованности с <literal>'add_path'</literal>), тогда как раньше он рассматривался как 
     имя каталога.
    </para>
   </listitem>
   <listitem>
    <para>
     Дополнительные функции сжатия/шифрования теперь перечислены в phpinfo.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
