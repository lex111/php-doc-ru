<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 350644 Maintainer: mch Status: ready -->
<!-- Reviewed: yes -->
<!-- $Revision$ -->
<appendix xml:id="migration51" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Миграция с PHP 5.0.x на PHP 5.1.x</title>
 <para>
  &manual.migration.seealso;
  <link linkend="migration5">5.0.x</link>, 
  <link linkend="migration52">5.2.x</link>,
  <link linkend="migration53">5.3.x</link>,
  <link linkend="migration54">5.4.x</link>,
  <link linkend="migration55">5.5.x</link> и
  <link linkend="migration56">5.6.x</link>.
 </para>

 <section xml:id="migration51.changes">
  <title>Основные возможности PHP 5.1.x</title>
  <para>
   Некоторые из ключевых возможностей PHP 5.1.x содержат:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Полностью переписан код по работе с датами с расширенной поддержкой временных зон.
    </para>
   </listitem>
   <listitem>
    <para>
     Значительное улучшение производительности по сравнению с PHP 5.0.X.
    </para>
   </listitem>
   <listitem>
    <para>
     Модуль PDO сейчас включен по умолчанию.
    </para>
   </listitem>
   <listitem>
    <para>
     Свыше 30 новых функций в различных модулях и во встроенной функциональности.
    </para>
   </listitem>
   <listitem>
    <para>
     Более 400 различных исправлений ошибок.
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="migration51.references">
  <title>Изменения в обработке ссылок</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.references-overview">Обзор</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-fails">Код, который работает на PHP
      4.3.x, но теперь терпит неудачу</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-error">Код, который работает на PHP
      4.3.x, но теперь вызывает ошибку</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-works">Код, который терпит неудачу на PHP
      4.3.x, но теперь работает</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-didnotwork">Код, который
      должен работать на PHP 5.0.x</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-warnings">Предупреждения,
      которые ранее были, а теперь нет</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.references-overview">
   <title>Обзор</title>
   <para>
    С точки зрения разработчика изменение, которое наиболее всего появлияет на устаревший код, это то, как обрабатываются ссылки, начиная с PHP 4.0.4.
   </para>
   <para>
    До PHP 4.3 включительно, можно было отправлять, назначать или возвращать
    переменные по ссылке, которые на самом деле должны возвращены по значению, в виде
    константы, временного значения (например, результат выражения) или результат функции,
    которая сама возвращает по значению, как в данном случае:
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = "123";

function return_value() {
    global $foo;
    return $foo;
}

$bar = &return_value();
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    Хотя данный код работает, как ожидается в PHP 4.3,
    в общем случае результат не определен. Движок Zend не мог
    корректно работать с этими значениями в качестве ссылок. Эта ошибка могла
    и приводила к различным трудно воспроизводимым ошибкам, связанных с проблемой
    повреждением памяти (memory corruption), особенно в случае большой кодовой базы.
   </para>
   <para>
    В PHP 4.4.0, PHP 5.0.4 и в последующих версиях PHP, движок был
    исправлен, чтобы 'знать', когда операция со ссылкой используется на значении,
    на которое не следует ссылаться. В таких случаях используется фактическое значение, и выдается предупреждение. Предупреждение имеет уровень
    <constant>E_NOTICE</constant> в PHP 4.4.0 и выше и
    <constant>E_STRICT</constant> в PHP 5.0.4 и выше.
   </para>
   <para>
    Код, который потенциально мог привести к повреждениям памяти, теперь больше к этому не приводит. Однако некоторый устаревший код может работать по-разному.
   </para>
  </section>

  <section xml:id="migration51.references-fails">
   <title>Код, который работает на PHP
      4.3.x, но теперь терпит неудачу</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function func(&$arraykey) {
    return $arraykey; // функция возвращает по значению
}

$array = array('a', 'b', 'c');
foreach (array_keys($array) as $key) {
    $y = &func($array[$key]);
    $z[] =& $y;
}

var_dump($z);
?>
]]>
    </programlisting>
    <para>
     Выполнение вышеприведенного кода в любой версии PHP, до версии,
     когда ошибка со ссылками была исправлена, приведет к такому выводу:
    </para>
    <screen>
<![CDATA[
array(3) {
  [0]=>
  &string(1) "a"
  [1]=>
  &string(1) "b"
  [2]=>
  &string(1) "c"
}
]]>
    </screen>
    <para>
     После исправления ошибки этот же код приведет к следующему результату:
    </para>
    <screen>
<![CDATA[
array(3) {
  [0]=>
  &string(1) "c"
  [1]=>
  &string(1) "c"
  [2]=>
  &string(1) "c"
}
]]>
    </screen>
   </informalexample>
   <para>
    Это связано с тем, что после изменений функция <literal>func()</literal>
    присваивает переменной по значению. Значение <varname>$y</varname> переопределяется,
    и привязка ссылок сохраняется от <varname>$z</varname>. До исправления
    значение присваивалось по ссылке, что приводило к тому,
    что ссылка <varname>$y</varname> обновляется при каждом присваивании.
    Попытка привязки к временному значению по ссылке была причиной повреждения памяти.
   </para>
   <para>
    Подобный код можно сделать одинаково работающим как в версиях PHP до исправления,
    так и после. Объвление <literal>func()</literal> может
    быть изменено для возврата по ссылке или присвоение по ссылке может быть может
    удалено из <literal>func()</literal>.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function func() {
    return 'возврат функции';
}

$x = 'исходное значение';
$y =& $x;
$y = &func();
echo $x;
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    В PHP 4.3 <varname>$x</varname> будет 'исходное значение', тогда как
    после исправления ошибки будет 'возврат функции' - помните, что если
    функция не возвращает по ссылке, присвоение по ссылке будет
    преобразовано в обычное присваивание. Опять же, этого можно достичь,
    заставив <literal>func()</literal> возвращать значение по ссылке, либо
    убрать присваивание по ссылке.
   </para>
  </section>

  <section xml:id="migration51.references-error">
   <title>Код, который работает на PHP
      4.3.x, но теперь вызывает ошибку</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {

    function getThis() {
        return $this;
    }

    function destroyThis() {
        $baz =& $this->getThis();
    }
}

$bar = new Foo();
$bar->destroyThis();
var_dump($bar);
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    В PHP 5.0.3 <varname>$bar</varname> выполняется как <constant>NULL</constant>
    вместо возврата объекта. Это происходит потому, что
    <literal>getThis()</literal> возвращает по значению, но значение присваивается
    по ссылке. Хотя он теперь работает как ожидается, это на самом деле
    некорректный код, который будет вызывать ошибку уровня <constant>E_NOTICE</constant>
    в PHP 4.4 или <constant>E_STRICT</constant> в PHP 5.0.4 и выше.
   </para>
  </section>

  <section xml:id="migration51.references-works">
   <title>Код, который терпит неудачу на PHP
      4.3.x, но теперь работает</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function &f() {
    $x = "foo";
    var_dump($x);
    print "$x\n";
    return($a);
}

for ($i = 0; $i < 3; $i++) {
    $h = &f();
}
?>
]]>
    </programlisting>
    <para>
     В PHP 4.3 третий вызов <function>var_dump</function> выдаст
     <constant>NULL</constant> из-за повреждения памяти, вызванного
     возвратом неинициализированного значения по ссылке. Это корректный
     код в PHP 5.0.4 и выше, но вызывает ошибки в ранних версиях PHP.
    </para>
   </informalexample>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = array('a1' => array('alfa' => 'ok'));
$arr =& $arr['a1'];
echo '-'.$arr['alfa']."-\n";
?>
]]>
    </programlisting>
    <para>
     До PHP 5.0.5 невозможно было присвоить элемент массива таким образом
     reference in this way. Теперь это исправлено.
    </para>
   </informalexample>
  </section>

  <section xml:id="migration51.references-didnotwork">
   <title>Код, который <literal>должен работать</literal>
       на PHP 5.0.x</title>
   <para>
    Есть несколько примеров ошибок, указываемых в PHP 5.0 до исправлений ссылок,
    которые теперь 'работают'. Однако в обоих случаях ошибки генерируются
    в PHP 5.1.x, потому что код прежде всего некорректный.
    Возврат значений с помощью <literal>self::</literal> теперь работает
    в общем случае, но выдает предупреждение <constant>E_STRICT</constant>,
    и хотя это может случиться при присвоении по ссылке на перегруженный объект,
    вы можете все еще увидеть <constant>E_ERROR</constant> при попытке использования,
    хотя само присваивание  работает.
   </para>
  </section>

  <section xml:id="migration51.references-warnings">
   <title>Предупреждения,
      которые ранее были, а теперь нет</title>
   <para>
    Вложенные вызовы функций, возвращаемых по ссылке, являются корректным кодом как
    в PHP 4.3.x, так и в PHP 5.1.x, но вызывают ошибки
    <constant>E_NOTICE</constant> или <constant>E_STRICT</constant> в новых версиях PHP.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function & foo() {
    $var = 'ок';
    return $var;
}

function & bar() {
    return foo();
}

$a =& bar();
echo "$a\n";
?>
]]>
    </programlisting>
   </informalexample>
  </section>
 </section>
 <section xml:id="migration51.reading">
  <title>Чтение []</title>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class XmlTest {

    function test_ref(&$test) {
        $test = "ок";
    }

    function test($test) { }

    function run() {
        $ar = array();
        $this->test_ref($ar[]);
        var_dump($ar);
        $this->test($ar[]);
    }
}

$o = new XmlTest();
$o->run();
?>
]]>
   </programlisting>
  </informalexample>
  <para>
   Это должно всегда выбрасывать фатальную ошибку <constant>E_ERROR</constant>,
   потому что [] не может использоваться для чтения PHP. Это некорректный код в
   PHP 4.4.2 и PHP 5.0.5 и выше.
  </para>
 </section>

 <section xml:id="migration51.integer-parameters">
  <title>Целочисленные значения в параметрах функции</title>
  <para>
   С появлением PHP 5.0.x был введен параметр новый API для анализа параметров,
   используемый большим количеством функций PHP. Во всех версиях PHP
   между 5.0.x и 5.1.x обработка целочисленных значений была очень строгой и
   отклоняла некорректные числовые значения, когда функция PHP ожидает
   целое число. Эти проверки теперь ослаблены для поддержки некорректных числовых
   строк, таких как " 123" и "123 ", и больше не будут терпеть неудачу, как в PHP 5.0.x.
   Однако для повышения безопасности кода и проверки ввода
   функции PHP теперь будет выдавать ошибки уровня <constant>E_NOTICE</constant>,
   когда такие строки передаются как целые числа.
  </para>
 </section>

 <section xml:id="migration51.oop">
  <title>Изменения класса и объекта</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.oop-functions"><literal>instanceof</literal>,
      <literal>is_a()</literal>, <literal>is_subclass_of()</literal> и
      <literal>catch</literal></link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-methods">Абстрактные закрытые методы</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-modifiers">Модификаторы доступа в интерфейсах</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-inheritance">Изменения в правилах наследования</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-constants">Константы класса</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.oop-functions">
   <title><literal>instanceof</literal>, <literal>is_a()</literal>,
    <literal>is_subclass_of()</literal> и <literal>catch</literal></title>
   <para>
    В PHP 5.0 <literal>is_a()</literal> была объявлена устаревшей и заменена
    оператором <literal>instanceof</literal>. Были некоторые проблемы с
    первоначальной реализацией <literal>instanceof</literal>, которая полагалась
    на <literal>__autoload()</literal> для поиска отсутствующих классов.
    Если класс отсутствует, <literal>instanceof</literal> будет вызывать
    фатальную ошибку уровня <constant>E_ERROR</constant> из-за неудачного выполнения
    <literal>__autoload()</literal> для поиска класса. Такое же поведение
    было в операторе <literal>catch</literal> и в функции
    <literal>is_subclass_of()</literal> по этой же причине.
   </para>
   <para>
    Ни одна из этих функций или операторов не вызывает <literal>__autoload()</literal>
    в PHP 5.1.x, а временное решение с помощью <literal>class_exists()</literal>
    в коде, написанном для PHP 5.0.x, хотя никоим образом не вызывает проблем,
    но теперь больше не нужно.
   </para>
  </section>

  <section xml:id="migration51.oop-methods">
   <title>Абстрактные закрытые методы</title>
   <para>
    Абстрактные закрытые методы поддерживались между PHP 5.0.0 и PHP 5.0.4,
    но затем были запрещены на том основании, что поведение 
    <literal>закрытых</literal> и <literal>абстрактных</literal> методов являются
    взаимоисключающими.
   </para>
  </section>

  <section xml:id="migration51.oop-modifiers">
   <title>Модификаторы доступа в интерфейсах</title>
   <para>
    В PHP 5.0 объявления функций в интерфейсах обрабатывались точно так же,
    как объявления функций в классах. Это уже не так с октября 2004 года,
    когда модификатор доступа <literal>public</literal>
    был разрешен в объявлениях функций интерфейса. Начиная с апреля
    2005 года, предшествующему выпуску PHP 5.0b1, также разрешен модификатор
    <literal>static</literal>. Однако модификаторы
    <literal>protected</literal> и <literal>private</literal> теперь генерируют
    ошибку уровня <constant>E_ERROR</constant>, также как
    <literal>abstract</literal>. Обратите внимание, что данное изменение
    не должно повлиять на существующий код,
    так как ни один из модификаторов не имеет смысла в контексте интерфейсов.
   </para>
  </section>

  <section xml:id="migration51.oop-inheritance">
   <title>Изменения в правилах наследования</title>
   <para>
    В PHP 5.0 было возможно объвить функцию в производном классе,
    которая не соответствовала объявлению этой же функции в базовом классе, например.
   </para>
   <informalexample>
    <para>
     Этот код выдаст ошибку уровня <constant>E_STRICT</constant> с PHP 5.1.x.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class Base {
    function &return_by_ref() {
        $r = 1;
        return $r;
    }
}

class Derived extends Base {
    function return_by_ref() {
        return 1;
    }
}
?>
]]>
    </programlisting>
   </informalexample>
  </section>

  <section xml:id="migration51.oop-constants">
   <title>Константы классов</title>
   <para>
    В PHP 5.0.x следующий код корректный:
   </para>
   <informalexample>
    <para>
     С PHP 5.1.x повторное определение константы класса выдаст
     ошибку уровня <constant>E_ERROR</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class test {
    const foobar = 'foo';
    const foobar = 'bar';
}

?>
]]>
    </programlisting>
   </informalexample>
  </section>
 </section> 

 <section xml:id="migration51.extensions">
  <title>Модули</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.extensions-gone">Модули, удаленные из ядра PHP</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.extensions-constants">Константы класса в новых модулях PHP 5.1.x</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.extensions-gone">
   <title>Модули, удаленные из ядра PHP</title>
   <para>
    Одна из первых вещей, которую вы, скорее всего, заметите при загрузке PHP 5.1.x,
    состоит в том, что некоторых из старых модулей больше нет. Те модули,
    которые все еще активно поддерживаются, доступны в библиотеке модулей сообщества PHP
    (PHP Extension Community Library, PECL) по адресу
    <link xlink:href="&url.pecl;">&url.pecl;</link>.
   </para>
   <table>
    <title>Удаленные модули</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Модуль</entry>
       <entry>Альтернатива/Статус</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>ext/cpdf</entry>
       <entry><link linkend="ref.pdf">pecl/pdflib</link></entry>
      </row>
      <row>
       <entry><link linkend="ref.dbx">ext/dbx</link></entry>
       <entry>pecl/dbx</entry>
      </row>
      <row>
       <entry><link linkend="ref.dio">ext/dio</link></entry>
       <entry>pecl/dio</entry>
      </row>
      <row>
       <entry>ext/fam</entry>
       <entry>Активно не поддерживается</entry>
      </row>
      <row>
       <entry><link linkend="ref.ingres">ext/ingres_ii</link></entry>
       <entry>pecl/ingres</entry>
      </row>
      <row>
       <entry>ext/ircg</entry>
       <entry>Активно не поддерживается</entry>
      </row>
      <row>
       <entry>ext/mcve</entry>
       <entry>pecl/mcve</entry>
      </row>
      <row>
       <entry>ext/mnogosearch</entry>
       <entry>Активно не поддерживается</entry>
      </row>
      <row>
       <entry>ext/oracle</entry>
       <entry>
        <link linkend="ref.oci8">ext/oci8</link> или
        <link linkend="ref.pdo-oci">ext/pdo_oci</link>
       </entry>
      </row>
      <row>
       <entry>ext/ovrimos</entry>
       <entry>Активно не поддерживается</entry>
      </row>
      <row>
       <entry>ext/pfpro</entry>
       <entry>Активно не поддерживается</entry>
      </row>
      <row>
       <entry>ext/w32api</entry>
       <entry><link xlink:href="&url.pecl.package;ffi">pecl/ffi</link></entry>
      </row>
      <row>
       <entry>ext/yp</entry>
       <entry>Активно не поддерживается</entry>
      </row>
      <row>
       <entry>ext/activescript</entry>
       <entry>
        <link xlink:href="&url.pecl.package;activescript">pecl/activescript</link>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    Модули в PECL, которые активно не поддерживаются (то есть не поддерживаются
    в течение некоторого времени, над ними никто не работает в данный момент, и у них
    нет релизов пакетов PECL), по-прежнему доступны в SVN по адресу
    <link xlink:href="&url.php.svn;pecl">&url.php.svn;pecl</link>.
    Однако новые версии модулей PHP, которые больше не выпускаются, по своей природе не поддерживаются, и их установка производиться на свой страх и риск.
   </para>
  </section>

  <section xml:id="migration51.extensions-constants">
   <title>Константы класса в новых модулях PHP 5.1.x</title>
   <para>
    API движка Zend 2.1 позволяет разработчикам модулей объявлять константы класса
    в объектно-ориентированных модулях. Новые модули, написанные для PHP
    5.1.x, включая <link linkend="ref.spl">SPL</link>,
    <link linkend="intro.pdo">PDO</link>,
    <link linkend="book.xmlreader">XMLReader</link> и
    <link linkend="ref.datetime">date</link>, имеют свои константы в
    формате <constant>PDO::CLASS_CONSTANT</constant>, а не в формате в стиле языка C -
     <constant>PDO_CLASS_CONSTANT</constant> для минимизации
     загрязнения глобального пространства PHP.
   </para>
  </section>
 </section>

 <section xml:id="migration51.datetime">
  <title>Поддержка даты и времени</title>
  <para>
   Поддержка даты и времени была полностью переписана в PHP 5.1.x и больше не использует
   системные настройки, чтобы 'знать' часовой пояс. Вместо этого
   для получения часового пояса будут выполняться следущие действия в таком порядке:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Часовой пояс, заданный с помощью <function>date_default_timezone_set</function>
     function (если есть)
    </para>
   </listitem>
   <listitem>
    <para>
     Переменная окружения TZ (если не пустая)
    </para>
   </listitem>
   <listitem>
    <para>
     "магическое" предположение (если операционная система поддерживает это)
    </para>
   </listitem>
   <listitem>
    <para>
     В случае если ни один из вариантов не прошел - используется UTC
    </para>
   </listitem>
  </itemizedlist>
  <informalexample>
   <para>
    Для обеспечения точности (и избежать предупреждения <constant>E_STRICT</constant>),
    вам необходимо определить свой часовой пояс в <filename>php.ini</filename>,
    используя следующий формат:
   </para>
   <para>
    date.timezone = Europe/London
   </para>
  </informalexample>
  <para>
   Поддерживаемые часовые пояса в таком формате перечислены в 
   <link linkend="timezones">приложении часовых поясов</link>.
  </para>
  <para>
   Также обратите внимание, что <function>strtotime</function> теперь возвращает &false;
   при ошибке, а не -1.
  </para>
 </section>

 <section xml:id="migration51.databases">
  <title>Изменения в поддержке базы данных</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.databases-pdo">Обзор PDO</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.databases-mysql">Изменения в поддержке MySQL</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.databases-sqlite">Изменения в поддержке SQLite</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.databases-pdo">
   <title>Обзор PDO</title>
   <para>
    <link linkend="intro.pdo">Объекты данных (PHP Data Objects, PDO)</link> были
    представлены в виде PECL-модуля в PHP 5.0 и стали основной частью PHP в
    PHP 5.1.x. Модуль PDO предоставляет согласованный интерфейс для доступа к 
    базе данных и используется вместе с драйверами PDO, специфичными для базы данных.
    Каждый драйвер может также иметь собственные функции, но основная функциональность
    для доступа к данным, например, выполнение запросов и получение результатов,
    охватываются функциями PDO, используя драйвер при создании через
    <function>PDO::__construct</function>.
   </para>
   <para>
    Обратите внимание, что модуль PDO и его драйверы предназначены для создания
    общих модулей. Это позволит легко обновлять драйверы из
    PECL, не заставляя вас пересобирать весь PHP.
   </para>
   <para>
    В момент выпуска PHP 5.1.x PDO готов к широкому тестированию и может
    быть использован в большинстве ситуаций. Однако, важно понимать, что
    PDO и его драйверы относительно новые и поэтому в них
    могут отсутствовать специфичные для базы данных возможности;
    тщательно проверяйте PDO, прежде чем использовать его в новых проектах.
   </para>
   <para>
    Устаревший код обычно полагается на ранее существовавшие расширения баз данных,
    которые все еще поддерживаются.
   </para>
  </section>

  <section xml:id="migration51.databases-mysql">
   <title>Изменения в поддержке MySQL</title>
   <para>
    В PHP 4 была встроена поддержка MySQL 3. С выпуском PHP 5.0 появились
    два модуля MySQL под названием 'mysql' и 'mysqli', которые были разработаны
    для поддержки MySQL &lt; 4.1 и MySQL 4.1 и выше, соответственно. С появлением
    PDO, обеспечивающий очень быстрый интерфейс для всех баз данных, драйвер
    PDO_MYSQL может поддерживать любую из существующих версий (MySQL 3, 4 or 5)
    в коде PHP, написанном для PDO, в зависимости от библиотеки MySQL, используемой
    при компиляции. Устаревшие модули MySQL все еще остаются по причине обратной
    совместимости, но по умолчанию отключены.
   </para>
  </section>

  <section xml:id="migration51.databases-sqlite">
   <title>Изменения в поддержке SQLite</title>

   <para>
    В PHP 5.0.x поддержка SQLite 2 обеспечивалась встроенным модулем sqlite,
    который также был доступен как модуль PECL в PHP 4.3 и PHP 4.4.
    С появлением PDO модуль sqlite удваивается для поддержки в качестве PDO-драйвера
    sqlite2; это связано с тем, что модуль sqlite в PHP 5.1.x зависит от модуля PDO.
   </para>
   <para>
    PHP 5.1.x поставляется с несколькими альтернативными интерфейсами для sqlite:
   </para>
   <para>    
    Модуль sqlite предоставляет "классический" процедурный и объектно-ориентированный
    API sqlite, который вы, возможно, использовали в предыдущих версиях PHP.
    Он также предоставляет драйвер PDO "sqlite2", который позволяет вам получить
    доступ к устаревшим базам данных SQLite 2 с использованием API PDO.
   </para>
   <para>
    PDO_SQLITE предоставляет драйвер "sqlite" версии 3. SQLite 3
    значительно превосходит SQLite версии 2, но форматы файлов двух версий несовместимы.
   </para>
   <para>
    Если ваш проект, использующий SQLite, уже написан и работает с более ранними версиями
    PHP, то вы можете продолжать использовать ext/sqlite без проблем, но вам нужно будет
    явно включить PDO и sqlite. Новые проекты должны использовать PDO и драйвер sqlite
    (с версией 3), поскольку он быстрее SQLite 2, в нем улучшена блокировка
    при конкурентном доступе и поддерживается как подготовленные запросы, так и столбцы с бинарными данными.
   </para>
   <para>
    Вы должны включить PDO для использования модуля SQLite. Если вы хотите собрать
    модуль PDO в качестве общего модуля, модуль SQLite также должен быть создан
    соответствующим образом. То же самое относится к любому модулю,
     предоставляющему драйвер PDO.
   </para>
  </section>
 </section> <!-- end of migration51.databases -->

 <section xml:id="migration51.errorcheck">
  <title>Проверка на <constant>E_STRICT</constant></title>
  <informalexample>
   <para>
    Если вы хотите проверить только один скрипт на ошибки
    уровня <constant>E_STRICT</constant>, воспользуйтесь
    командной строкой:
   </para>
   <programlisting role="shell">
    php -d error_reporting=4095 -l script_to_check.php
   </programlisting>
   <para>
    Для более крупных проектов скрипт оболочки выполнит аналогичную задачу:
   </para>
   <programlisting role="shell">
<![CDATA[
#!/bin/sh

directory=$1

shift

# Проверяемые модули
extensions="php inc"

check_file ()
{
  echo -ne "Выполнение проверки синтасиса для $1 ..."

  # Опции:
  ERRORS=`/www/php/bin/php -d display_errors=1 -d html_errors=0 -d error_prepend_string=" " -d error_append_string=" " -d error_reporting=4095 -l $1 | grep -v "Синтаксические ошибки не обнаружены"`

  if test -z "$ERRORS"; then
    echo -ne "Ошибок нет."
  else
    echo -e "Найдены ошибки!\n$ERRORS"
  fi

  echo
}

# цикл по оставшимся флагам файла
for FILE in "$@" ; do
  for ext in $extensions; do
     if echo $FILE | grep "\.$ext$" > /dev/null; then
       if test -f $FILE; then
         check_file "$FILE"
       fi
     fi
  done
done
]]>
   </programlisting>
  </informalexample>
 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
